(defn str-to-ints [string] (map #(Integer/parseInt %) (clojure.string/split string #" ")))
(def data (map str-to-ints (clojure.string/split-lines (slurp "p11input.txt"))))
(defn take-col [line col data] (if (<= line (- (count data) 4)) [(nth (nth data line) col) (nth (nth data (+ line 1)) col) (nth (nth data (+ line 2)) col) (nth (nth data (+ line 3)) col)]))
(defn take-line [line col data] (if (<= col (- (count data) 4)) [(nth (nth data line) col) (nth (nth data line) (+ col 1)) (nth (nth data line) (+ col 2)) (nth (nth data line) (+ col 3))]))
(defn diag-left [line col data] (if (and (<= line (- (count data) 4)) (>= col 3)) [(nth (nth data line) col) (nth (nth data (+ line 1)) (- col 1)) (nth (nth data (+ line 2)) (- col 2)) (nth (nth data (+ line 3)) (- col 3))]))
(defn diag-right [line col data] (if (and (<= col (- (count data) 4)) (<= line (- (count data) 4))) [(nth (nth data line) col) (nth (nth data (+ line 1)) (+ col 1)) (nth (nth data (+ line 2)) (+ col 2)) (nth (nth data (+ line 3)) (+ col 3))]))
(defn gen [line col data] (remove nil? [(take-col line col data) (take-line line col data) (diag-left line col data) (diag-right line col data)]))
(defn max-line-col [line col data] (reduce max 0 (map #(reduce * %) (gen line col data))))
(defn max-row [row data] (reduce max (map #(max-line-col row % data) (range (count data)))))
(defn all-max [data] (reduce max (map #(max-row % data) (range (count data)))))
(all-max data)
